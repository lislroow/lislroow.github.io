<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dlog – system</title>
    <link>/system/</link>
    <description>Recent content in system on dlog</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/system/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>System: httpd</title>
      <link>/system/httpd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/system/httpd/</guid>
      <description>
        
        
        &lt;h2 id=&#34;configure&#34;&gt;configure&lt;/h2&gt;
&lt;h3 id=&#34;httpdconf&#34;&gt;httpd.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ServerRoot &amp;quot;/etc/httpd&amp;quot;

Listen 80

Include conf.modules.d/*.conf

User apache
Group web

ServerAdmin hi@mgkim.net
ServerName develop:80

&amp;lt;Directory /&amp;gt;
  AllowOverride none
  Require all denied
&amp;lt;/Directory&amp;gt;

DocumentRoot &amp;quot;/var/www/html&amp;quot;

&amp;lt;Files &amp;quot;.ht*&amp;quot;&amp;gt;
  Require all denied
&amp;lt;/Files&amp;gt;

ErrorLog &amp;quot;/outlog/WEB/httpd/error.log&amp;quot;

LogLevel warn

&amp;lt;IfModule log_config_module&amp;gt;
  LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
  LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b&amp;quot; common
  &amp;lt;IfModule logio_module&amp;gt;
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot; %I %O&amp;quot; combinedio
  &amp;lt;/IfModule&amp;gt;
  CustomLog &amp;quot;/outlog/WEB/httpd/access.log&amp;quot; combined
&amp;lt;/IfModule&amp;gt;

&amp;lt;IfModule alias_module&amp;gt;
  ScriptAlias /cgi-bin/ &amp;quot;/var/www/cgi-bin/&amp;quot;
&amp;lt;/IfModule&amp;gt;

&amp;lt;Directory &amp;quot;/var/www/cgi-bin&amp;quot;&amp;gt;
  AllowOverride None
  Options None
  Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;IfModule mime_module&amp;gt;
  TypesConfig /etc/mime.types
  AddType application/x-compress .Z
  AddType application/x-gzip .gz .tgz
  AddType text/html .shtml
  AddOutputFilter INCLUDES .shtml
&amp;lt;/IfModule&amp;gt;

AddDefaultCharset UTF-8

&amp;lt;IfModule mime_magic_module&amp;gt;
  MIMEMagicFile conf/magic
&amp;lt;/IfModule&amp;gt;

EnableSendfile on
IncludeOptional conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sslconf&#34;&gt;ssl.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Listen 443 https

SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin

&amp;lt;VirtualHost _default_:443&amp;gt;
  ServerName develop
  ErrorLog /outlog/WEB/httpd/develop-error_ssl.log
  TransferLog /outlog/WEB/httpd/develop-access_ssl.log
  LogLevel warn

  SSLEngine on
  SSLProtocol all -SSLv2 -SSLv3
  SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA
  SSLCertificateFile /etc/httpd/conf.d/certs/develop.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/develop.key
  &amp;lt;Files ~ &amp;quot;\.(cgi|shtml|phtml|php3?)$&amp;quot;&amp;gt;
    SSLOptions +StdEnvVars
  &amp;lt;/Files&amp;gt;
  &amp;lt;Directory &amp;quot;/var/www/cgi-bin&amp;quot;&amp;gt;
    SSLOptions +StdEnvVars
  &amp;lt;/Directory&amp;gt;
  BrowserMatch &amp;quot;MSIE [2-5]&amp;quot; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0
  CustomLog /outlog/WEB/httpd/default-request_ssl.log &amp;quot;%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \&amp;quot;%r\&amp;quot; %b&amp;quot;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vhost-nexusconf&#34;&gt;vhost-nexus.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName nexus

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://nexus.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName nexus

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/nexus.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/nexus.key

  RewriteEngine On
  RewriteRule /(.*) https://nexus.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

### mgkim.net

&amp;lt;VirtualHost *:80&amp;gt;
  ServerName nexus.mgkim.net

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://%{HTTP_HOST}/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName nexus.mgkim.net

  ErrorLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/nexus.mgkim.net_ssl-error.log.%Y-%m-%d 86400 +540%&amp;quot;
  CustomLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/nexus.mgkim.net_ssl-access.log.%Y-%m-%d 86400 +540%&amp;quot; combined

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/STAR.mgkim.net.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/STAR.mgkim.net.key

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  ProxyRequests Off
  ProxyPreserveHost On

  &amp;lt;Proxy *&amp;gt;
    Require all granted
  &amp;lt;/Proxy&amp;gt;

  ProxyPass / http://127.0.0.1:8100/
  ProxyPassReverse / http://127.0.0.1:8100/
  RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot;
  #ProxyPassMatch ^/(.*)$ http://127.0.0.1:8100/$1
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vhost-gitlabconf&#34;&gt;vhost-gitlab.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName gitlab

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://gitlab.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName gitlab

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/gitlab.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/gitlab.key

  RewriteEngine On
  RewriteRule /(.*) https://gitlab.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

### mgkim.net

&amp;lt;VirtualHost *:80&amp;gt;
  ServerName gitlab.mgkim.net

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://%{HTTP_HOST}/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName gitlab.mgkim.net

  DocumentRoot &amp;quot;/opt/gitlab/embedded/service/gitlab-rails/public&amp;quot;
  ErrorLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/gitlab.mgkim.net_ssl-error.log.%Y-%m-%d 86400 +540&amp;quot;
  CustomLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/gitlab.mgkim.net_ssl-access.log.%Y-%m-%d 86400 +540&amp;quot; combined

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/STAR.mgkim.net.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/STAR.mgkim.net.key

  ProxyRequests Off
  ProxyPreserveHost On

  &amp;lt;Proxy gitlab&amp;gt;
    Require all granted
  &amp;lt;/Proxy&amp;gt;

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  ProxyPass / http://127.0.0.1:8200/
  ProxyPassReverse / http://127.0.0.1:8200/
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vhost-jenkinsconf&#34;&gt;vhost-jenkins.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName jenkins

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteCond %{REQUEST_URI} ^/(computer)/.*$
  RewriteRule /(.*) http://localhost:8400/$1 [QSA,P,L]
  RewriteCond %{REQUEST_URI} ^/(wsagents)/.*$
  RewriteRule /(.*) ws://localhost:8400/$1 [QSA,P,L]

  RewriteRule /(.*) https://jenkins.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName jenkins

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/jenkins.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/jenkins.key

  RewriteEngine On
  RewriteRule /(.*) https://jenkins.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

### mgkim.net

&amp;lt;VirtualHost *:80&amp;gt;
  ServerName jenkins.mgkim.net

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteCond %{REQUEST_URI} ^/(computer)/.*$
  RewriteRule /(.*) http://localhost:8400/$1 [QSA,P,L]
  RewriteCond %{REQUEST_URI} ^/(wsagents)/.*$
  RewriteRule /(.*) ws://localhost:8400/$1 [QSA,P,L]

  RewriteRule /(.*) https://jenkins.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName jenkins.mgkim.net

  ErrorLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/jenkins.mgkim.net_ssl-error.log.%Y-%m-%d 86400 +540&amp;quot;
  CustomLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/jenkins.mgkim.net_ssl-access.log.%Y-%m-%d 86400 +540&amp;quot; combined

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/STAR.mgkim.net.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/STAR.mgkim.net.key

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  RewriteEngine On
  RewriteCond %{HTTP:Upgrade} =websocket [NC]
  RewriteRule /(.*) ws://localhost:8400/$1 [P,L]
  RewriteCond %{HTTP:Upgrade} !=websocket [NC]
  RewriteRule /(.*) http://localhost:8400/$1 [P,L]
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vhost-dlogconf&#34;&gt;vhost-dlog.conf&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName dlog

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://dlog.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName dlog

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/dlog.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/dlog.key

  RewriteEngine On
  RewriteRule /(.*) https://dlog.mgkim.net/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

### mgkim.net

&amp;lt;VirtualHost *:80&amp;gt;
  ServerName dlog.mgkim.net

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://%{HTTP_HOST}/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:443&amp;gt;
  ServerName dlog.mgkim.net

  #DocumentRoot &amp;quot;/opt/gitlab/embedded/service/gitlab-rails/public&amp;quot;
  ErrorLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/dlog.mgkim.net_ssl-error.log.%Y-%m-%d 86400 +540&amp;quot;
  CustomLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/dlog.mgkim.net_ssl-access.log.%Y-%m-%d 86400 +540&amp;quot; combined

  SSLEngine On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile /etc/httpd/conf.d/certs/STAR.mgkim.net.crt
  SSLCertificateKeyFile /etc/httpd/conf.d/certs/STAR.mgkim.net.key

  ProxyRequests Off
  ProxyPreserveHost On

  &amp;lt;Proxy gitlab&amp;gt;
    Require all granted
  &amp;lt;/Proxy&amp;gt;

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  ProxyPass / http://127.0.0.1:1313/
  ProxyPassReverse / http://127.0.0.1:1313/
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;connector&#34;&gt;connector&lt;/h2&gt;
&lt;h3 id=&#34;weblogic&#34;&gt;weblogic&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;LoadModule weblogic_module modules/mod_wl_24.so

&amp;lt;IfModule mod_weblogic.c&amp;gt;
  WebLogicCluster IP:PORT,IP:PORT,IP:PORT
  ConnectTimeoutSecs 8
  ConnectRetrySecs 2
  Idempotent OFF
  DynamicServerList OFF
  MatchExpression *
  KeepAliveEnabled OFF
&amp;lt;/IfModule&amp;gt;

&amp;lt;Location /api &amp;gt;
  WLSRequest On
  #SetHandler weblogic-handler
  WebLogicCluster IP:PORT,IP:PORT,IP:PORT
  #Idempotent OFF
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;windows&#34;&gt;windows&lt;/h2&gt;
&lt;h3 id=&#34;install-command-apache-lounge&#34;&gt;install command (Apache Lounge)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;httpd.exe -k install
httpd.exe -k configtest
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configure-1&#34;&gt;configure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;httpd.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ServerRoot &amp;quot;Z:/www/httpd_2.4.25-win64-VC14/Apache24&amp;quot;

Listen 80

LoadModule access_compat_module modules/mod_access_compat.so
LoadModule actions_module modules/mod_actions.so
LoadModule alias_module modules/mod_alias.so
LoadModule allowmethods_module modules/mod_allowmethods.so
LoadModule asis_module modules/mod_asis.so
LoadModule auth_basic_module modules/mod_auth_basic.so
#LoadModule auth_digest_module modules/mod_auth_digest.so
#LoadModule auth_form_module modules/mod_auth_form.so
#LoadModule authn_anon_module modules/mod_authn_anon.so
LoadModule authn_core_module modules/mod_authn_core.so
#LoadModule authn_dbd_module modules/mod_authn_dbd.so
#LoadModule authn_dbm_module modules/mod_authn_dbm.so
LoadModule authn_file_module modules/mod_authn_file.so
#LoadModule authn_socache_module modules/mod_authn_socache.so
#LoadModule authnz_fcgi_module modules/mod_authnz_fcgi.so
#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so
LoadModule authz_core_module modules/mod_authz_core.so
#LoadModule authz_dbd_module modules/mod_authz_dbd.so
#LoadModule authz_dbm_module modules/mod_authz_dbm.so
LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_host_module modules/mod_authz_host.so
#LoadModule authz_owner_module modules/mod_authz_owner.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule autoindex_module modules/mod_autoindex.so
#LoadModule buffer_module modules/mod_buffer.so
#LoadModule cache_module modules/mod_cache.so
#LoadModule cache_disk_module modules/mod_cache_disk.so
#LoadModule cache_socache_module modules/mod_cache_socache.so
#LoadModule cern_meta_module modules/mod_cern_meta.so
LoadModule cgi_module modules/mod_cgi.so
#LoadModule charset_lite_module modules/mod_charset_lite.so
#LoadModule data_module modules/mod_data.so
#LoadModule dav_module modules/mod_dav.so
#LoadModule dav_fs_module modules/mod_dav_fs.so
#LoadModule dav_lock_module modules/mod_dav_lock.so
#LoadModule dbd_module modules/mod_dbd.so
#LoadModule deflate_module modules/mod_deflate.so
LoadModule dir_module modules/mod_dir.so
#LoadModule dumpio_module modules/mod_dumpio.so
LoadModule env_module modules/mod_env.so
#LoadModule expires_module modules/mod_expires.so
#LoadModule ext_filter_module modules/mod_ext_filter.so
#LoadModule file_cache_module modules/mod_file_cache.so
#LoadModule filter_module modules/mod_filter.so
#LoadModule http2_module modules/mod_http2.so
LoadModule headers_module modules/mod_headers.so
#LoadModule heartbeat_module modules/mod_heartbeat.so
#LoadModule heartmonitor_module modules/mod_heartmonitor.so
#LoadModule ident_module modules/mod_ident.so
#LoadModule imagemap_module modules/mod_imagemap.so
LoadModule include_module modules/mod_include.so
#LoadModule info_module modules/mod_info.so
LoadModule isapi_module modules/mod_isapi.so
#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so
#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so
#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so
#LoadModule ldap_module modules/mod_ldap.so
#LoadModule logio_module modules/mod_logio.so
LoadModule log_config_module modules/mod_log_config.so
#LoadModule log_debug_module modules/mod_log_debug.so
#LoadModule log_forensic_module modules/mod_log_forensic.so
#LoadModule lua_module modules/mod_lua.so
#LoadModule macro_module modules/mod_macro.so
LoadModule mime_module modules/mod_mime.so
#LoadModule mime_magic_module modules/mod_mime_magic.so
LoadModule negotiation_module modules/mod_negotiation.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule proxy_express_module modules/mod_proxy_express.so
LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
LoadModule proxy_hcheck_module modules/mod_proxy_hcheck.so
LoadModule proxy_html_module modules/mod_proxy_html.so
LoadModule proxy_http_module modules/mod_proxy_http.so
#LoadModule proxy_http2_module modules/mod_proxy_http2.so
#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so
#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
#LoadModule ratelimit_module modules/mod_ratelimit.so
#LoadModule reflector_module modules/mod_reflector.so
#LoadModule remoteip_module modules/mod_remoteip.so
#LoadModule request_module modules/mod_request.so
#LoadModule reqtimeout_module modules/mod_reqtimeout.so
LoadModule rewrite_module modules/mod_rewrite.so
#LoadModule sed_module modules/mod_sed.so
#LoadModule session_module modules/mod_session.so
#LoadModule session_cookie_module modules/mod_session_cookie.so
#LoadModule session_crypto_module modules/mod_session_crypto.so
#LoadModule session_dbd_module modules/mod_session_dbd.so
LoadModule setenvif_module modules/mod_setenvif.so
#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so
LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
#LoadModule socache_dbm_module modules/mod_socache_dbm.so
#LoadModule socache_memcache_module modules/mod_socache_memcache.so
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
#LoadModule speling_module modules/mod_speling.so
LoadModule ssl_module modules/mod_ssl.so
#LoadModule status_module modules/mod_status.so
#LoadModule substitute_module modules/mod_substitute.so
#LoadModule unique_id_module modules/mod_unique_id.so
#LoadModule userdir_module modules/mod_userdir.so
#LoadModule usertrack_module modules/mod_usertrack.so
#LoadModule version_module modules/mod_version.so
#LoadModule vhost_alias_module modules/mod_vhost_alias.so
LoadModule watchdog_module modules/mod_watchdog.so
LoadModule xml2enc_module modules/mod_xml2enc.so

&amp;lt;IfModule unixd_module&amp;gt;
  User daemon
  Group daemon
&amp;lt;/IfModule&amp;gt;

ServerAdmin hi@mgkim.net

ServerName mgkim.net:50001

&amp;lt;Directory /&amp;gt;
  AllowOverride none
  Require all denied
&amp;lt;/Directory&amp;gt;

DocumentRoot &amp;quot;Z:/www/20210825_171631&amp;quot;
&amp;lt;Directory &amp;quot;Z:/www/20210825_171631&amp;quot;&amp;gt;
  Options Indexes FollowSymLinks
  AllowOverride None
  Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;IfModule dir_module&amp;gt;
  DirectoryIndex index.html
&amp;lt;/IfModule&amp;gt;

&amp;lt;Files &amp;quot;.ht*&amp;quot;&amp;gt;
  Require all denied
&amp;lt;/Files&amp;gt;

ErrorLog &amp;quot;logs/error.log&amp;quot;

LogLevel warn

&amp;lt;IfModule log_config_module&amp;gt;
  LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
  LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b&amp;quot; common

  &amp;lt;IfModule logio_module&amp;gt;
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot; %I %O&amp;quot; combinedio
  &amp;lt;/IfModule&amp;gt;
  CustomLog &amp;quot;logs/access.log&amp;quot; common
&amp;lt;/IfModule&amp;gt;

&amp;lt;IfModule alias_module&amp;gt;
  ScriptAlias /cgi-bin/ &amp;quot;c:/Apache24/cgi-bin/&amp;quot;
&amp;lt;/IfModule&amp;gt;

&amp;lt;IfModule headers_module&amp;gt;
  RequestHeader unset Proxy early
&amp;lt;/IfModule&amp;gt;

&amp;lt;IfModule mime_module&amp;gt;
  TypesConfig conf/mime.types
  AddType application/x-compress .Z
  AddType application/x-gzip .gz .tgz
&amp;lt;/IfModule&amp;gt;

### include

Include conf/extra/vhost-dlog.conf
Include conf/extra/ssl.conf

### exclude

#Include conf/extra/httpd-mpm.conf
#Include conf/extra/httpd-multilang-errordoc.conf
#Include conf/extra/httpd-autoindex.conf
#Include conf/extra/httpd-languages.conf
#Include conf/extra/httpd-userdir.conf
#Include conf/extra/httpd-info.conf
#Include conf/extra/httpd-manual.conf
#Include conf/extra/httpd-dav.conf
#Include conf/extra/httpd-default.conf
#&amp;lt;IfModule proxy_html_module&amp;gt;
#  Include conf/extra/proxy-html.conf
#&amp;lt;/IfModule&amp;gt;
&amp;lt;IfModule ssl_module&amp;gt;
  SSLRandomSeed startup builtin
  SSLRandomSeed connect builtin
&amp;lt;/IfModule&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ssl.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Listen 9443
#Listen 443

SSLCipherSuite HIGH:MEDIUM:!MD5:!RC4
SSLProxyCipherSuite HIGH:MEDIUM:!MD5:!RC4

SSLHonorCipherOrder on

SSLProtocol all -SSLv3
SSLProxyProtocol all -SSLv3

SSLPassPhraseDialog  builtin

SSLSessionCache         &amp;quot;shmcb:c:/Apache24/logs/ssl_scache(512000)&amp;quot;
SSLSessionCacheTimeout  300
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;vhost-dlog.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#&amp;lt;VirtualHost *:80&amp;gt;
#  ServerName vdlog.mgkim.net:80
#
#  RewriteEngine On
#  RewriteCond %{HTTPS} !=On
#  RewriteRule /(.*) https://vdlog.mgkim.net:9443/$1 [QSA,R,L]
#&amp;lt;/VirtualHost&amp;gt;
#
#&amp;lt;VirtualHost *:9443&amp;gt;
#  ServerName vdlog.mgkim.net:9443
#
#  ErrorLog &amp;quot;|bin/rotatelogs.exe logs/vdlog.mgkim.net_ssl-error.log.%Y-%m-%d 86400 +540&amp;quot;
#  CustomLog &amp;quot;|bin/rotatelogs.exe logs/vdlog.mgkim.net_ssl-access.log.%Y-%m-%d 86400 +540&amp;quot; combined
#
#  SSLEngine On
#  SSLProxyEngine On
#  SSLProtocol all -SSLv2
#  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
#  SSLCertificateFile conf/certs/STAR.mgkim.net.crt
#  SSLCertificateKeyFile conf/certs/STAR.mgkim.net.key
#
#  ProxyRequests Off
#  ProxyPreserveHost On
#
#  &amp;lt;Proxy gitlab&amp;gt;
#    Require all granted
#  &amp;lt;/Proxy&amp;gt;
#
#  AllowEncodedSlashes On
#  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;
#
#  ProxyPass / http://127.0.0.1:1313/
#  ProxyPassReverse / http://127.0.0.1:1313/
#&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
  ServerName vdlog.mgkim.net:80
  ServerAlias mgkim.net:80

  ErrorLog &amp;quot;|bin/rotatelogs.exe logs/vdlog.mgkim.net-error.log.%Y-%m-%d 86400 +540&amp;quot;
  CustomLog &amp;quot;|bin/rotatelogs.exe logs/vdlog.mgkim.net-access.log.%Y-%m-%d 86400 +540&amp;quot; combined

  ProxyRequests Off
  ProxyPreserveHost On

  &amp;lt;Proxy gitlab&amp;gt;
    Require all granted
  &amp;lt;/Proxy&amp;gt;

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  ProxyPass / http://127.0.0.1:1313/
  ProxyPassReverse / http://127.0.0.1:1313/
&amp;lt;/VirtualHost&amp;gt;



&amp;lt;VirtualHost *:80&amp;gt;
  ServerName vdlog:80

  RewriteEngine On
  RewriteCond %{HTTPS} !=On
  RewriteRule /(.*) https://vdlog:9443/$1 [QSA,R,L]
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:9443&amp;gt;
  ServerName vdlog:9443

  SSLEngine On
  SSLProxyEngine On
  #SSLProxyCheckPeerCN On
  #SSLProxyCheckPeerExpire On
  SSLProtocol all -SSLv2
  SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5
  SSLCertificateFile conf/certs/vdlog.crt
  SSLCertificateKeyFile conf/certs/vdlog.key

  RewriteEngine On
  RewriteRule /(.*) https://dlog.mgkim.net:443/$1 [QSA,P,L]
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;openssl&#34;&gt;openssl&lt;/h2&gt;
&lt;h3 id=&#34;인증서-생성하기&#34;&gt;인증서 생성하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;개인키(key) 생성&lt;/li&gt;
&lt;li&gt;인증서발급신청서(CSR) 생성&lt;/li&gt;
&lt;li&gt;인증서(CRT) 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;useful&#34;&gt;useful&lt;/h3&gt;
&lt;p&gt;개인키(domain.key)와 인증서(domain.crt) 파일을 동시에 생성하는 스크립트 입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;root@develop /etc/httpd/conf.d/certs&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ cat create-cert.sh
&lt;span style=&#34;color:#19177c&#34;&gt;DOMAIN&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#19177c&#34;&gt;$1&lt;/span&gt;

openssl req -x509 -nodes -days &lt;span style=&#34;color:#666&#34;&gt;730&lt;/span&gt; -newkey rsa:2048 -keyout &lt;span style=&#34;color:#19177c&#34;&gt;$DOMAIN&lt;/span&gt;.key -out &lt;span style=&#34;color:#19177c&#34;&gt;$DOMAIN&lt;/span&gt;.crt -config &amp;lt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;cat &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;lt;&amp;lt;- TEXT
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[req]
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;distinguished_name = req_distinguished_name
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;x509_extensions = v3_req
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;prompt = no
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[req_distinguished_name]
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;countryName             = KR
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;stateOrProvinceName     = Seoul
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;localityName            = Seonyudo
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;organizationName        = SPACESOFT
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;organizationalUnitName  = Dev Team
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;CN = $DOMAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[v3_req]
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;keyUsage = critical, digitalSignature, keyAgreement
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;extendedKeyUsage = serverAuth
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;subjectAltName = @alt_names
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;[alt_names]
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;DNS.1 = $DOMAIN
&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;TEXT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; -sha256

&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;root@develop /etc/httpd/conf.d/certs&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;selinux&#34;&gt;selinux&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;chcon -Rt httpd_log_t /outlog/WEB
chcon -Rt httpd_sys_content_t /app/WEB/dlog
setsebool -P httpd_can_network_connect on

systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>System: jenkins</title>
      <link>/system/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/system/jenkins/</guid>
      <description>
        
        
        &lt;h2 id=&#34;plugins&#34;&gt;plugins&lt;/h2&gt;
&lt;h3 id=&#34;publish-over-ssh&#34;&gt;Publish Over SSH&lt;/h3&gt;
&lt;p&gt;mvn 빌드 후 생성된 artifact 파일을 sftp 로 전송하고 ssh 로 command 를 실행하는 기능을 사용할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 구성에서 &lt;code&gt;빌드 후 조치&lt;/code&gt; &amp;gt; &lt;code&gt;Send build artifacts over SSH&lt;/code&gt; 선택&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add Server&lt;/code&gt; 버튼을 클릭하여 &lt;code&gt;SSH Server&lt;/code&gt; 선택
&lt;ul&gt;
&lt;li&gt;선택되는 서버는 빌드 결과물인 artifact 파일을 전송하고, ssh 로 command 를 실행할 서버를 의미함&lt;/li&gt;
&lt;li&gt;아래 &lt;code&gt;Transfer Set&lt;/code&gt; 에 설정되는 &lt;code&gt;Exec command&lt;/code&gt;의 내용이 빌드 로그에 출력되도록 &lt;code&gt;고급&lt;/code&gt;버튼을 눌러 &lt;code&gt;Verbose output in console&lt;/code&gt; 을 선택할 것&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;[INFO] ------------------------------------------------------------------------
SSH: Connecting from host [i9-9900K]
SSH: Connecting with configuration [tomcat@develop] ...
SSH: Creating session: username [tomcat], hostname [develop], port [22]
SSH: Connecting session ...
SSH: Connected
SSH: Opening SFTP channel ...
SSH: SFTP channel open
SSH: Connecting SFTP channel ...
SSH: Connected
SSH: cd [/app/WAS/prototype]
SSH: OK
SSH: cd [/app/WAS/prototype]
SSH: OK
SSH: cd [boot-www]
SSH: OK
SSH: put [boot-www-0.0.1-SNAPSHOT.war]
SSH: OK
SSH: cd [/app/WAS/prototype]
SSH: OK
SSH: cd [boot-www]
SSH: OK
SSH: put [deploy.sh]
SSH: OK
SSH: Opening exec channel ...
SSH: EXEC: channel open
SSH: EXEC: STDOUT/STDERR from command [chmod u+x /app/WAS/prototype/boot-www/deploy.sh

/app/WAS/prototype/boot-www/deploy.sh restart] ...
SSH: EXEC: connected
Stopping boot-www
stopped boot-www
Starting boot-www
SSH: EXEC: completed after 1,202 ms
SSH: Disconnecting configuration [tomcat@develop] ...
SSH: Transferred 2 ( 1 + 1 ) file(s)
Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add Transfer Set&lt;/code&gt; 버튼을 클릭하여 &lt;code&gt;Transfers Set&lt;/code&gt; 입력
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source files&lt;/code&gt;: 전송할 파일을 입력 (예: **/target/*.war)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remove prefix&lt;/code&gt;: 전송시 source files 의 파일경로를 제거 (예: ./boot-www/target/)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote directory&lt;/code&gt;: &amp;hellip; (예: boot-www 라고 입력하면 /app/WAS/prototype/boot-www 이렇게 base-dir 하위에 디렉토리를 생성하여 source files 가 전송됨)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exec command&lt;/code&gt;: 파일 전송 후 실행할 command 를 입력 (배포 후 container 재시작을 하기 위한 command 입력)&lt;/li&gt;
&lt;li&gt;참고로 war 파일과 was 재시작을 위한 sh 파일을 같이 전송해야하는 경우에는 &lt;code&gt;Transfers Set&lt;/code&gt;을 2개로 나눠서 전송하는 방법도 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;SSH Server 추가하기&lt;/h4&gt;

    &lt;p&gt;&lt;code&gt;SSH Server&lt;/code&gt; 는 &lt;code&gt;Jenkins 관리&lt;/code&gt; &amp;gt; &lt;code&gt;시스템 설정&lt;/code&gt; &amp;gt; &lt;code&gt;Publish over SSH&lt;/code&gt; 에서 추가를 해야 선택하는 항목이 나옵니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Passphrase&lt;/code&gt;: 시스템 계정 jenkins 로 생성한 rsa 키의 비밀번호를 입력합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Path to key&lt;/code&gt;: rsa 키 쌍 중 개인키의 경로를 입력합니다. (/home/jenkins/.ssh/id_rsa)
jenkins node 구성에서 slave-node 을 추가했다면 jenkins 를 호스팅하고 있는 서버에서 생성한 개인키 파일에 접근할 수 없기에 &lt;code&gt;Key&lt;/code&gt; 항목에 개인키를 설정하여 사용해야 함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: 개인키의 경로를 입력하지 않을 경우 개인키의 내용 추가로 설정할 수 있습니다. (키 경로 입력 시 생략할 것)&lt;br/&gt;
개인키의 형태는 다음과 같으며 참고로 jenkins 에 설정할때에는 BEGIN 부터 END 까지 모두 입력해야 합니다.
&lt;pre&gt;&lt;code&gt;-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,BB513C74CDF53133B6B805F08C716E14
&lt;p&gt;lqXA6gIhaf3ztU1SoQVGvUtLWtXqINxbGzNfau3v+DIHRKJjVY1JvBj2mmADIxEq
&amp;hellip;
YqTPbiAOgnHAD9CgWg/v55Zl9zLrPKLakCJPYzGNrLo2BJ4qXR1ZX371JEsXq8tq
&amp;mdash;&amp;ndash;END RSA PRIVATE KEY&amp;mdash;&amp;ndash;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/p&gt;
&lt;li&gt;&lt;code&gt;SSH Servers&lt;/code&gt;에 추가 버튼을 클릭하여 hostname, username, remote directory 입력합니다.&lt;br/&gt;
입력이 끝나고 &lt;code&gt;Test Configuration&lt;/code&gt; 버튼을 클릭하여 테스트를 해봅니다.&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;h3 id=&#34;gitlab-plugin&#34;&gt;GitLab Plugin&lt;/h3&gt;
&lt;p&gt;gitlab 과 연동하기 위한 플러그인입니다.&lt;/p&gt;
&lt;p&gt;gitlab 에서 push 이벤트가 발생했을 경우 jenkins 에서 build 가 실행되도록 하기위해 사용됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gitlab 에서 &lt;code&gt;User Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Access Tokens&lt;/code&gt; 메뉴에서 &lt;code&gt;Access Token&lt;/code&gt; 을 생성할 것&lt;/li&gt;
&lt;li&gt;jenkins 플러그인 관리에서 &lt;code&gt;GitLab Plugin&lt;/code&gt; 을 검색하고 설치&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins 관리&lt;/code&gt; &amp;gt; &lt;code&gt;Manage Credentials&lt;/code&gt; 로 이동하여 &lt;code&gt;Access Token&lt;/code&gt;을 추가함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins 관리&lt;/code&gt; &amp;gt; &lt;code&gt;시스템 설정&lt;/code&gt; 메뉴로 이동하여 &lt;code&gt;Gitlab&lt;/code&gt; 섹션으로 이동
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Credentials&lt;/code&gt;: &lt;code&gt;Manage Credentials&lt;/code&gt;에서 추가한 &lt;code&gt;Gitlab API token&lt;/code&gt; 을 선택하고 &lt;code&gt;Test Connection&lt;/code&gt; 버튼을 클릭하여 동작을 확인함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로젝트의 &lt;code&gt;구성&lt;/code&gt;에서 &lt;code&gt;빌드 유발&lt;/code&gt; 섹션으로 이동
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Build when a change is pushed to GitLab. GitLab webhook URL: http://jenkins/project/boot-www&lt;/code&gt;: 이 항목을 체크하면 세부 항목들이 나타남. (세부 항목에 대해 모르면 기본 체크 상태 유지)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secret token&lt;/code&gt;: (이 항목은 &lt;code&gt;고급&lt;/code&gt; 버튼을 클릭해야 나타남) &lt;code&gt;Generate&lt;/code&gt; 버튼을 클릭하면 값이 생성됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;GitLab webhook URL, Secret token 항목을 gitlab Webhooks 에 설정하기&lt;/h4&gt;

    &lt;p&gt;아래 2개의 항목은 gitlab 의 프로젝트 설정의 &lt;code&gt;Webhooks&lt;/code&gt; 에서 설정해야하는 값입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GitLab webhook URL&lt;/code&gt;: 이 값은 체크항목에 레이블로 표시되어있는 &lt;code&gt;http://jenkins/project/boot-www&lt;/code&gt; 이며, &lt;code&gt;Webhooks&lt;/code&gt; 의 &lt;code&gt;URL&lt;/code&gt; 에 입력해야 하는 값.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secret token&lt;/code&gt;: 이 값은 &lt;code&gt;Generate&lt;/code&gt; 버튼 클릭으로 생성되며, &lt;code&gt;Webhooks&lt;/code&gt; 의 &lt;code&gt;Secret Token&lt;/code&gt; 에 입력해야 하는 값.&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;h3 id=&#34;github-integration-plugin&#34;&gt;GitHub Integration Plugin&lt;/h3&gt;
&lt;p&gt;github 저장소에서 webhook 으로 push 이벤트를 받아서 jenkins build가 실행되도록 할 때 사용합니다.&lt;/p&gt;
&lt;p&gt;활용법: &lt;a href=&#34;#github-연결&#34;&gt;github 연결&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;build&#34;&gt;build&lt;/h2&gt;
&lt;h3 id=&#34;분산-빌드-환경&#34;&gt;분산 빌드 환경&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;jenkins 관리&lt;/code&gt; 에서 &lt;code&gt;노드 관리&lt;/code&gt; 메뉴로 이동하면 &lt;code&gt;분산 빌드 환경&lt;/code&gt;을 위한 노드를 추가할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 환경을 구성하면 jenkins 가 설치된 서버에서는 더 이상 빌드를 수행하지 않고 추가된 노드에서 빌드가 수행됩니다.&lt;/p&gt;
&lt;p&gt;다음은 windows 환경의 slave-node를 추가하는 예시입니다.
(jenkins 는 master-node이며, 추가되는 node들은 slave-node 입니다.)&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;주요 설정 항목&lt;/h4&gt;

    &lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;: slave-node 이름 (설명에는 &lt;code&gt;9900K&lt;/code&gt; 로 했습니다.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote root directory&lt;/code&gt;: slave-node 의 workspace 디렉토리를 지정합니다.
참고로 &lt;code&gt;Z:\jenkins&lt;/code&gt; 라고 입력하면 빌드 시 &lt;code&gt;Z:\jenkins\workspace\boot-www&lt;/code&gt; 디렉토리가 생성됩니다. (&lt;code&gt;boot-www&lt;/code&gt; 는 jenkins 프로젝트명 입니다.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Labels&lt;/code&gt;: jenkins 프로젝트에 label 을 설정할 수 있으며, 해당 프로젝트에 포함된 label 과 매핑된 노드에서 빌드가 수행됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Launch method&lt;/code&gt;: &lt;code&gt;Use WebSocket&lt;/code&gt; 항목을 체크할 것&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;slave-node 를 추가하면 slave-node에서 jenkins 와 연결하는 방법을 알려줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect agent to Jenkins one of these ways:

Java Web Start is not available for the JVM version running Jenkins

Run from agent command line:

javaws http://jenkins/computer/9900K/jenkins-agent.jnlp
Or if the agent is headless:

java -jar agent.jar -jnlpUrl http://jenkins/computer/9900K/jenkins-agent.jnlp -workDir &amp;quot;Z:\jenkins&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;slave-node 와 jenkins 연결하기&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Z:\jenkins&lt;/code&gt; 에 agent.jar 를 다운로드 받음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Z:\jenkins\start-agent.cmd&lt;/code&gt; 파일을 생성하고 아래 내용으로 설정&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set JAVA_HOME=Z:\develop\java\openjdk-11.0.2
set PATH=%JAVA_HOME%\bin;%PATH%

java -jar agent.jar -jnlpUrl http://jenkins/computer/9900K/jenkins-agent.jnlp -workDir &amp;quot;Z:\jenkins&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start-agent.cmd&lt;/code&gt; 실행 후 아래와 같이 console 로그가 출력되면 정상 실행&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Z:\jenkins&amp;gt;set JAVA_HOME=Z:\develop\java\openjdk-11.0.2

Z:\jenkins&amp;gt;set PATH=Z:\develop\java\openjdk-11.0.2\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;Z:\oracle\ora12c_32bit\client_12_1\bin;Z:\develop\java\openjdk-11.0.2\bin;Z:\develop\build\maven-3.6.3\bin;C:\Users\Administrator\AppData\Local\Programs\Microsoft VS Code\bin;Z:\develop\hugo\hugo-ext-0.87.0;C:\Users\Administrator\AppData\Roaming\npm;Z:\www\httpd_2.4.25-win64-VC14\openssl-0.9.8e_X64\bin;

Z:\jenkins&amp;gt;java -jar agent.jar -jnlpUrl http://jenkins/computer/9900K/jenkins-agent.jnlp -workDir &amp;quot;Z:\jenkins&amp;quot;
9월 13, 2021 11:55:53 오후 org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir
INFO: Using Z:\jenkins\remoting as a remoting work directory
9월 13, 2021 11:55:53 오후 org.jenkinsci.remoting.engine.WorkDirManager setupLogging
INFO: Both error and output logs will be printed to Z:\jenkins\remoting
9월 13, 2021 11:55:53 오후 hudson.remoting.jnlp.Main createEngine
INFO: Setting up agent: 9900K
9월 13, 2021 11:55:53 오후 hudson.remoting.jnlp.Main$CuiListener &amp;lt;init&amp;gt;
INFO: Jenkins agent is running in headless mode.
9월 13, 2021 11:55:53 오후 hudson.remoting.Engine startEngine
INFO: Using Remoting version: 4.10
9월 13, 2021 11:55:53 오후 org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir
INFO: Using Z:\jenkins\remoting as a remoting work directory
9월 13, 2021 11:55:53 오후 hudson.remoting.jnlp.Main$CuiListener status
INFO: WebSocket connection open
9월 13, 2021 11:55:53 오후 hudson.remoting.jnlp.Main$CuiListener status
INFO: Connected
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;참고로 여기서 연결이 안되는 상황이 발생함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agent.jar 실행 시 jenkins 에 접속할 때 websocket 으로 접속을 하게되는데 ssl 이 적용된 프로토콜 https, wss 은 handshake 오류가 발생함&lt;br/&gt;
httpd 설정에 http 를 https 로 redirect 하도록 mod_rewrite 를 설정했는데 오류로 인해 rewrite 설정은 제거함&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;jenkins 의 가상호스트 설정은 다음과 같습니다.
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName jenkins

  ErrorLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/jenkins-error.log.%Y-%m-%d 86400 +540&amp;quot;
  CustomLog &amp;quot;|/usr/sbin/rotatelogs /outlog/WEB/httpd/jenkins-access.log.%Y-%m-%d 86400 +540&amp;quot; combined

  AllowEncodedSlashes On
  Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;

  RewriteEngine On
  RewriteCond %{HTTP:Upgrade} =websocket [NC]
  RewriteRule /(.*) ws://localhost:8400/$1 [P,L]
  RewriteCond %{HTTP:Upgrade} !=websocket [NC]
  RewriteRule /(.*) http://localhost:8400/$1 [P,L]
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jenkins 프로젝트에 label 을 추가된 slave-node 의 label 로 변경하고 빌드를 실행하면 &lt;code&gt;Z:\jenkins\workspace\&lt;/code&gt; 디렉토리에 jenkins 프로젝트 디렉토리가 생성되고 &lt;code&gt;소스 코드 관리&lt;/code&gt;를 설정했을 경우 소스코드가 checkout 되어있을 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이후 &lt;code&gt;Publish Over SSH&lt;/code&gt; 플러그인을 사용하여 was 서버에 war 파일을 publish 를 하고 was 를 재시작하는 command 를 ssh 로 수행하도록 설정하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-연결&#34;&gt;github 연결&lt;/h3&gt;
&lt;p&gt;required plugin: &lt;code&gt;GitHub Integration Plugin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;jenkins 프로젝트의 &lt;code&gt;소스 코드 관리&lt;/code&gt; 섹션에서 github 저장소와 연결하는 설정입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Repository URL&lt;/code&gt;: github 의 프로젝트 저장소 url 을 입력 &lt;code&gt;https://github.com/lislroow/spring.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Credentials&lt;/code&gt;: github 에서 &lt;code&gt;Personal access tokens&lt;/code&gt; 을 발급받고 jenkins 에 등록하고 선택&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;github 에서 Personal access tokens 발급 및 jenkins Credentials 등록&lt;/h4&gt;

    &lt;ol&gt;
&lt;li&gt;github 로그인 후 &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Developer settings&lt;/code&gt; &amp;gt; &lt;code&gt;Personal access tokens&lt;/code&gt; 메뉴 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Generate new token&lt;/code&gt; 버튼 클릭 후 &lt;code&gt;Expiration&lt;/code&gt; 과 &lt;code&gt;Select scopes&lt;/code&gt; 를 선택&lt;br/&gt;
&lt;code&gt;Select scopes&lt;/code&gt;은 &lt;code&gt;repo&lt;/code&gt;, &lt;code&gt;admin:repo_hook&lt;/code&gt;를 전체 선택&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Generate token&lt;/code&gt; 버튼 클릭으로 토큰을 생성
&lt;ul&gt;
&lt;li&gt;생성된 토큰(access token) 값은 다시 확인할 수 없습니다. (재생성해야하는 것으로 알고 있음)&lt;/li&gt;
&lt;li&gt;jenkins 에 등록될 access token 은 github 의 id 와 함께 사용되는 패스워드입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jenkins &lt;code&gt;Manage Credentials&lt;/code&gt; 에서 &lt;code&gt;Add Credentials&lt;/code&gt; 을 합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kind&lt;/code&gt;: &lt;code&gt;Username with password&lt;/code&gt; 를 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Username&lt;/code&gt;: github 에 로그인할 때 사용하는 id 를 입력합니다. (&lt;code&gt;lislroow&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Password&lt;/code&gt;: github 에서 생성한 토큰(access token)을 입력합니다. (&lt;code&gt;ghp_***생략***&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/div&gt;

&lt;p&gt;jenkins 프로젝트의 &lt;code&gt;빌드 유발&lt;/code&gt; 섹션에서 github 저장소에 push 이벤트를 받을 수 있도록 설정합니다.
&lt;code&gt;GitHub hook trigger for GITScm polling&lt;/code&gt; 체크&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;github 에서 push 이벤트 jenkins 로 전송하기&lt;/h4&gt;

    &lt;ol&gt;
&lt;li&gt;github 의 프로젝트로 이동한 다음 &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Webhooks&lt;/code&gt; 메뉴로 이동합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add webhook&lt;/code&gt; 버튼을 클릭하여 다음을 입력합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Payload URL&lt;/code&gt;: &lt;code&gt;http://{jenkins-domain}/github-webhook/&lt;/code&gt; 으로 입력합니다.&lt;br/&gt;
참고로 uri 는 반드시 &lt;code&gt;/github-webhook/&lt;/code&gt; 으로 되어야 합니다. (&lt;code&gt;/github-webhook&lt;/code&gt; 으로하면 302 를 응답받고 실패합니다.)&lt;br/&gt;
&lt;code&gt;Payload URL&lt;/code&gt; 을 입력하게되면 github 저장소에 push 이벤트가 발생할 때 해당 URL 을 호출하게되고, jenkins 는 이 http 요청을 받고 build 를 실행하게 되는 형태입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content type&lt;/code&gt;: &lt;code&gt;application/json&lt;/code&gt; 으로 설정&lt;/li&gt;
&lt;li&gt;저장 후 소스코드를 수정하고 commit;push 를 하게되면 추가된 webhook 항목을 클릭했을 때 &lt;code&gt;Recent Deliveries&lt;/code&gt; 를 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>System: linux</title>
      <link>/system/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/system/linux/</guid>
      <description>
        
        
        &lt;h2 id=&#34;systemd&#34;&gt;systemd&lt;/h2&gt;
&lt;p&gt;systemd 는 centos 7 부터 포함된 기능입니다.&lt;/p&gt;
&lt;p&gt;/etc/init.d 에서 서비스를 관리했던 것을 systemd 로 관리하게 되었습니다.&lt;/p&gt;
&lt;p&gt;실행 명령어는 systemctl 입니다.&lt;/p&gt;
&lt;h3 id=&#34;서비스-생성&#34;&gt;서비스 생성&lt;/h3&gt;
&lt;p&gt;새로운 서비스를 등록할 경우 아래 템플릿으로 파일을 생성합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일경로: &lt;code&gt;/etc/systemd/system/{서비스명}.service&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@develop /etc/systemd/system]$ cat jenkins.service
[Unit]
Description=Jenkins
After=network.target syslog.target

[Service]
Type=forking
User=jenkins
Group=ci

ExecStart=/prod/jenkins/jenkins.sh start
ExecStop=/prod/jenkins/jenkins.sh stop

Restart=on-abort

[Install]
WantedBy=multi-user.target
[root@develop /etc/systemd/system]$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;yum 으로 패키지 설치시 systemctl 에 등록된 정보를 아래와 같은 방법으로 확인합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@develop /etc/systemd/system]$ systemctl --help
systemctl [OPTIONS...] {COMMAND} ...

Unit Commands:
  list-units [PATTERN...]         List loaded units

[root@develop /etc/systemd/system]$ systemctl list-units | grep httpd
httpd.service                                                                        loaded active running   The Apache HTTP Server
[root@develop /etc/systemd/system]$
[root@develop /etc/systemd/system]$ systemctl status httpd.service
● httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)
[root@develop /etc/systemd/system]$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;httpd 의 서비스 파일은 &lt;code&gt;/usr/lib/systemd/system/httpd.service&lt;/code&gt; 에 있음을 확인할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;서비스-등록&#34;&gt;서비스 등록&lt;/h3&gt;
&lt;p&gt;서비스 파일을 생성한 다음 systemctl 에 등록을 해야 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@develop /etc/systemd/system]$ systemctl --help | grep reload
     --no-reload      Don&#39;t reload daemon after en-/dis-abling unit files
  reload NAME...                  Reload one or more units
  reload-or-restart NAME...       Reload one or more units if possible,
  reload-or-try-restart NAME...   Reload one or more units if possible,
  daemon-reload                   Reload systemd manager configuration
[root@develop /etc/systemd/system]$
[root@develop /etc/systemd/system]$ systemctl daemon-reload
[root@develop /etc/systemd/system]$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;systemctl daemon-reload&lt;/code&gt; 명령으로 reload 를 합니다.&lt;/p&gt;
&lt;h3 id=&#34;서비스-활성화&#34;&gt;서비스 활성화&lt;/h3&gt;
&lt;p&gt;서비스 활성화 상태로 설정을 하게되면 os booting 시 자동으로 실행이 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@develop /etc/systemd/system]$ systemctl --help | grep enable
     --preset-mode=   Apply only enable, only disable, or all presets
  enable NAME...                  Enable one or more unit files
  reenable NAME...                Reenable one or more unit files
  is-enabled NAME...              Check whether unit files are enabled
[root@develop /etc/systemd/system]$
[root@develop /etc/systemd/system]$ systemctl is-enabled orcl@oracledb.service
enabled
[root@develop /etc/systemd/system]$ systemctl is-enabled httpd.service
enabled
[root@develop /etc/systemd/system]$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;systemctl enable {서비스}&lt;/code&gt; 명령으로 enabled 상태로 설정합니다.&lt;/p&gt;
&lt;h2 id=&#34;network&#34;&gt;network&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;root@develop ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$ cat /etc/sysconfig/network-scripts/ifcfg-ens32
&lt;span style=&#34;color:#19177c&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Ethernet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;PROXY_METHOD&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;DEFROUTE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV6INIT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;stable-privacy&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ens32&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;UUID&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;d18679f4-c760-4621-b73a-8e7b513594a7&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;DEVICE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;ens32&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;ONBOOT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;IPADDR&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.28.200.20&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;PREFIX&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;24&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;GATEWAY&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;172.28.200.2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#19177c&#34;&gt;DNS1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;8.8.8.8&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;[&lt;/span&gt;root@develop ~&lt;span style=&#34;color:#666&#34;&gt;]&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hostname&#34;&gt;hostname&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@develop ~]$ hostnamectl set-hostname develop
[root@develop ~]$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;shell&#34;&gt;shell&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[ -z ] : 문자열의 길이가 0이면 참
[ -n ] : 문자열의 길이가 0이 아니면 참
[ -eq ] : 값이 같으면 참
[ -ne ] : 값이 다르면 참
[ -gt ] :  값1 &amp;gt; 값2
[ -ge ] : 값1  &amp;gt;= 값2
[ -lt ] : 값1 &amp;lt; 값2
[ -le ] : 값1 &amp;lt;= 값2
[ -a ] : &amp;amp;&amp;amp;연산과 동일 and 연산
[ -o ] : ||연산과 동일 xor 연산
[ -d ] : 파일이 디렉토리면 참
[ -e ] : 파일이 있으면 참
[ -L ] : 파일이 심볼릭 링크면 참
[ -r ] : 파일이 읽기 가능하면 참
[ -s ] : 파일의 크기가 0 보다 크면 참
[ -w ] : 파일이 쓰기 가능하면 참
[ -x ] : 파일이 실행 가능하면 참
[ 파일1 -nt 파일2 ] : 파일1이 파일2보다 최신파일이면 참
[ 파일1 -ot 파일2 ] : 파일1이 파일2보다 이전파일이면 참
[ 파일1 -ef 파일2 ] : 파일1이 파일2랑 같은 파일이면 참
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>System: openssh</title>
      <link>/system/openssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/system/openssh/</guid>
      <description>
        
        
        &lt;h2 id=&#34;패키지-확인&#34;&gt;패키지 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@develop ~]$ yum list *openssh*
Loaded plugins: fastestmirror, langpacks
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
Loading mirror speeds from cached hostfile
 * base: mirror.kakao.com
 * epel: ftp.yz.yamagata-u.ac.jp
 * extras: mirror.kakao.com
 * updates: mirror.kakao.com
Installed Packages
openssh.x86_64                                               7.4p1-21.el7                                                @anaconda
[root@develop ~]$
[root@develop ~]$ rpm -ql openssh.x86_64
/etc/ssh
/etc/ssh/moduli
/usr/bin/ssh-keygen

[root@develop ~]$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;key-생성&#34;&gt;key 생성&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; 인자 &lt;code&gt;-t rsa&lt;/code&gt; 는 rsa 타입으로 생성 입니다.
key 생성 경로는 home 디렉토리의 &lt;code&gt;.ssh&lt;/code&gt; 디렉토리에 생성이 됩니다.
&lt;code&gt;passphrase&lt;/code&gt; 는 key 의 비밀번호 입니다.&lt;/p&gt;
&lt;p&gt;key 생성이 되면 &lt;code&gt;.ssh&lt;/code&gt; 디렉토리에는 &lt;code&gt;id_rsa&lt;/code&gt;(개인키), &lt;code&gt;id_rsa.pub&lt;/code&gt;(공개키) 2개의 파일이 있습니다.&lt;/p&gt;
&lt;p&gt;공개키인 &lt;code&gt;id_rsa.pub&lt;/code&gt; 파일의 내용은 SSH로 접속하려는 대상 서버의 시스템계정 홈디렉토리의 .ssh/authorized_keys 파일에 추가하여 사용됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[tomcat@develop ~]$ pwd
/home/tomcat
[tomcat@develop ~]$ ls -al
합계 28
drwx------. 4 tomcat ap    140  9월 13 11:41 .
drwxr-xr-x. 7 root   root   74 11월 22  2020 ..
-rw-------. 1 tomcat ap   1357  9월 13 11:41 .bash_history
-rw-r--r--. 1 tomcat ap     18  4월  1  2020 .bash_logout
-rw-r--r--. 1 tomcat ap    616 12월 24  2020 .bash_profile
-rw-r--r--. 1 tomcat ap    231  4월  1  2020 .bashrc
drwxr-xr-x. 3 tomcat ap     18 12월 24  2020 .cache
drwxr-xr-x. 3 tomcat ap     18 12월 24  2020 .config
-rw-------  1 tomcat ap   1024  9월 13 11:39 .rnd
-rw-------  1 tomcat ap   5762  9월 13 11:39 .viminfo
[tomcat@develop ~]$ ssh-keygen --help
unknown option -- -
usage: ssh-keygen [-q] [-b bits] [-t dsa | ecdsa | ed25519 | rsa | rsa1]
                  [-N new_passphrase] [-C comment] [-f output_keyfile]
       ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]
       ssh-keygen -i [-m key_format] [-f input_keyfile]
       ssh-keygen -e [-m key_format] [-f input_keyfile]
       ssh-keygen -y [-f input_keyfile]
       ssh-keygen -c [-P passphrase] [-C comment] [-f keyfile]
       ssh-keygen -l [-v] [-E fingerprint_hash] [-f input_keyfile]
       ssh-keygen -B [-f input_keyfile]
       ssh-keygen -D pkcs11
       ssh-keygen -F hostname [-f known_hosts_file] [-l]
       ssh-keygen -H [-f known_hosts_file]
       ssh-keygen -R hostname [-f known_hosts_file]
       ssh-keygen -r hostname [-f input_keyfile] [-g]
       ssh-keygen -G output_file [-v] [-b bits] [-M memory] [-S start_point]
       ssh-keygen -T output_file -f input_file [-v] [-a rounds] [-J num_lines]
                  [-j start_line] [-K checkpt] [-W generator]
       ssh-keygen -s ca_key -I certificate_identity [-h] [-n principals]
                  [-O option] [-V validity_interval] [-z serial_number] file ...
       ssh-keygen -L [-f input_keyfile]
       ssh-keygen -A
       ssh-keygen -k -f krl_file [-u] [-s ca_public] [-z version_number]
                  file ...
       ssh-keygen -Q -f krl_file file ...
[tomcat@develop ~]$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/tomcat/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/tomcat/.ssh/id_rsa.
Your public key has been saved in /home/tomcat/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:Lp68Qh20r1rnsr+IyTTayVl/pbd8VlEL3mWGuez3IYY tomcat@develop
The key&#39;s randomart image is:
+---[RSA 2048]----+
|               o |
|      .      .o =|
|     . .    ..o++|
|      o      .o+ |
|     . oS   ..  .|
|    . ...  E.o..o|
|   .o +.o  o. .oo|
|   *.@oB  o.. o .|
|  . XoB==o .o+   |
+----[SHA256]-----+
[tomcat@develop ~]$
[tomcat@develop ~]$ ls -al /home/tomcat/.ssh
합계 8
drwx------  2 tomcat ap   38  9월 13 11:51 .
drwx------. 5 tomcat ap  152  9월 13 11:48 ..
-rw-------  1 tomcat ap 1766  9월 13 11:51 id_rsa
-rw-r--r--  1 tomcat ap  396  9월 13 11:51 id_rsa.pub
[tomcat@develop ~]$
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>System: openssl</title>
      <link>/system/openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/system/openssl/</guid>
      <description>
        
        
        &lt;h2 id=&#34;basic-key-생성&#34;&gt;basic key 생성&lt;/h2&gt;
&lt;h3 id=&#34;암호화하지-않은-개인키&#34;&gt;암호화하지 않은 개인키&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;openssl genrsa -out private_key.pem 2048
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3des로-암호화된-개인키-생성&#34;&gt;3des로 암호화된 개인키 생성&lt;/h3&gt;
&lt;p&gt;passphrase를 입력이 필요합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl genrsa -des3 -out enc_private_key.pem 2048
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;기존-개인키에-패스워드-추가&#34;&gt;기존 개인키에 패스워드 추가&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;openssl rsa -des3 -in private_key.pem -out enc_private_key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;기존-개인키에-패스워드-제거&#34;&gt;기존 개인키에 패스워드 제거&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;openssl rsa -in enc_private_key.pem -out private_key.pem
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
