<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shells on MEMO</title>
    <link>https://lislroow.github.io/shell/</link>
    <description>Recent content in Shells on MEMO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <atom:link href="https://lislroow.github.io/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://lislroow.github.io/shell/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lislroow.github.io/shell/bash/</guid>
      <description>grep -q grep -q: &amp;ldquo;quiet&amp;rdquo; 또는 &amp;ldquo;silent&amp;rdquo; 모드로 실행 grep은 검색 결과를 출력하지 않고, 검색 결과의 유무에 따라 exitCode 만 반환 있을 경우 exitCode 는 0 이되고, 그렇지 않을 경우 1을 반환 root@a54d5bb18443:/etc# grep -q &amp;#39;root&amp;#39; passwd root@a54d5bb18443:/etc# echo $? 0 root@a54d5bb18443:/etc# grep -q &amp;#39;root2&amp;#39; passwd root@a54d5bb18443:/etc# echo $? 1 root@a54d5bb18443:/etc# ssh 파일 전송 tar cvfz - N305.sh \ &amp;gt; | ssh root@172.28.200.2 &amp;#39;tar zxvf - -C /root/bin&amp;#39; getopts getopts는 옵션을 하나씩 처리할 때마다 옵션 문자를 OPTIND와 같은 변수에 저장하고, 각 옵션에 대한 인수는 $OPTARG에 저장됩니다.</description>
    </item>
    <item>
      <title></title>
      <link>https://lislroow.github.io/shell/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lislroow.github.io/shell/docker/</guid>
      <description>docker login ~/.docker/config.json 파일에 인증정보 echo -n &amp;quot;admin:password&amp;quot; | base64 를 추가 (-n: newline 추가 하지 않음) { &amp;#34;auths&amp;#34;: { &amp;#34;docker.mgkim.net:5000&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;YWRtaW46cGFzc3dvcmQ=&amp;#34; // base64(username:password) } } } lets encrypt ~/bin/letsencrypt.sh #!/bin/bash echo &amp;#39;[1/4] Set domain&amp;#39; read -p &amp;#34;Enter the x (x.mgkim.net) : &amp;#34; -ei &amp;#34;x&amp;#34; domain printf $&amp;#39;\n&amp;#39;$&amp;#39;\n&amp;#39; echo &amp;#39;[2/4] Shutdown nginx (http:80)&amp;#39; docker stop nginx printf $&amp;#39;\n&amp;#39;$&amp;#39;\n&amp;#39; echo &amp;#39;[3/4] Generate cert&amp;#39; docker run -it --rm --name certbot -p 80:80 \ -v &amp;#34;/etc/letsencrypt:/etc/letsencrypt&amp;#34; \ -v &amp;#34;/lib/letsencrypt:/var/lib/letsencrypt&amp;#34; \ certbot/certbot certonly --standalone -d &amp;#34;${domain}.</description>
    </item>
  </channel>
</rss>
